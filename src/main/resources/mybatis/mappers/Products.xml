<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sample.mapper.ProductMapper">

	<!-- 
		ProductMapper 인터페이스의 void insertProduct(Product product) 추상메소드와 연관된 SQL 구문이다.
		
		출력 : void - resultType - 없음
		입력 : Product - parameterType - com.sample.vo.Product
	-->
	<insert id="insertProduct" parameterType="com.sample.vo.Product">
		 
		INSERT INTO shop_products
		(product_no, product_name, product_description, product_stock, product_price)
		VALUES
		(products_seq.nextval, #{name}, #{description}, #{stock}, #{price})
		
	</insert>
	
	<!-- 
		ProductMapper 인터페이스의 List<Product> getAllProducts() 추상메소드와 연관된 SQL 구문이다. 
		
		출력 : List<Product> - resultType - com.sample.vo.Product
		입력 : 없음 - parameterType - 없음
	-->
	<select id="getAllProducts" resultType="com.sample.vo.Product">
		
		SELECT 
				product_no					AS no,
				product_name				AS name,
				product_description			AS description,
				product_stock				AS stock,
				product_price				AS price,
				product_status				AS status,
				product_fileName			AS fileName,
				product_created_date		AS createdDate,
				product_updated_date		AS updatedDate
		
		FROM
				shop_products
				
		ORDER BY	
				product_no DESC
				
	</select>
	
	<!-- 
		ProductMapper 인터페이스의 Product getProductByNo(int no) 추상메소드와 연관된 SQL 구문이다.
		
		출력 : Product - resultType - com.sample.vo.Product
		입력 : int - parameterType - int
	 -->
	<select id="getProductByNo" parameterType="int" resultType="com.sample.vo.Product">
		SELECT
				product_no					AS no,
				product_name				AS name,
				product_description			AS description,
				product_stock				AS stock,
				product_price				AS price,
				product_status				AS status,
				product_fileName			AS fileName,
				product_created_date		AS createdDate,
				product_updated_date		AS updatedDate
		
		FROM
				shop_products
				
		WHERE
				product_no = #{value}
	</select>
	
	<!-- 
		ProductMapper 인터페이스의 int getTotalRows(Criteria criteria) 추상메소드와 연관된 SQL 구문이다.
		
		출력 : int - resultType - int
		입력 : Criteria - parameterType - com.sample.web.dto.Criteria
	 -->
	<select id="getTotalRows" parameterType="com.sample.web.dto.Criteria" resultType="int">
		SELECT
				count(*)
				
		FROM
				shop_products
		<where>
			<if test="opt != null">
				<choose>
					<when test="opt == 'name'">
						product_name like '%' || #{keyword} || '%'
					</when>
					<when test="opt == 'price'">
						product_price BETWEEN 0 AND to_number(#{keyword})
					</when>
				</choose>
			</if>
		</where>
	</select>
	
	<!-- 
		ProductMapper 인터페이스의 List<Product> getProducts(Criteria criteria) 추상메소드와 연관된 SQL 구문이다.
		
		출력 : List<Product> - resultType - com.sample.vo.Product
		입력 : Criteria - parameterType - com.sample.web.dto.Criteria
	 -->
	<select id="getProducts" parameterType="com.sample.web.dto.Criteria" resultType="com.sample.vo.Product">
		SELECT
				product_no				AS no,
				product_name			AS name,
				product_price			AS price,
				product_status			AS status,	
				product_stock			AS stock
				
		FROM	(SELECT 
						product_no,
						product_name,
						product_price,
						product_status,
						product_stock,
						<choose>
							<when test="sort == 'date'">
								row_number() OVER(ORDER BY product_no DESC) row_num
							</when>
							<when test="sort == 'name'">
								row_number() OVER(ORDER BY product_name ASC) row_num
							</when>
							<when test="sort == 'lowprice'">
								row_number() OVER(ORDER BY product_price ASC) row_num
							</when>
							<when test="sort == 'highprice'">
								row_number() OVER(ORDER BY product_price DESC) row_num
							</when>
						</choose>
						
				FROM
						shop_products
				
				<where>
					<if test="opt != null">
						<choose>
							<when test="opt == 'name'">
								product_name like '%' || #{keyword} || '%'
							</when>
							<when test="opt == 'price'">
								product_price BETWEEN 0 AND to_number(#{keyword})
							</when>
						</choose>
					</if>
				</where>		
				)
				
		WHERE
				row_num BETWEEN #{begin} AND #{end}
	</select>
	
</mapper>
